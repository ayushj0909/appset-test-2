name: Validate Helm Charts

on:
  pull_request:
    paths:
      - 'charts/**'
  workflow_dispatch:
  push:


jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.16.1

      - name: Render Helm Chart
        run: helm template workload ./chart/workload -f values/common.yaml -f values/analyst/prod.values.yaml --skip-schema-validation > rendered.yaml

      - name: Validate rendered manifests with kubeconform
        id: validate
        run: docker run --rm -v "$(pwd):/workspace" ghcr.io/yannh/kubeconform:latest -verbose -summary -output text /workspace/rendered.yaml | tee kubeconform_output.txt

      - name: Process and generate summary
        if: always()
        run: |
          echo "## Kubeconform Results" >> $GITHUB_STEP_SUMMARY
          # Create Markdown table header
          echo "| Resource Kind | Resource Name | Result | Reason |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|---------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
      
          while IFS= read -r line; do
            # Process only lines starting with the expected prefix
            if [[ "$line" =~ ^/workspace/rendered.yaml ]]; then
              # Remove the prefix "/workspace/rendered.yaml - " from the line
              clean_line="${line#/workspace/rendered.yaml - }"
              # Extract Resource Kind (first word) and Resource Name (second word)
              resource_kind=$(echo "$clean_line" | awk '{print $1}')
              resource_name=$(echo "$clean_line" | awk '{print $2}')
              # Initialize result and reason
              result=""
              reason=""
              # Check the line for failure or error first
              if [[ "$clean_line" == *"failed"* ]]; then
                result="❌ invalid"
                # Extract text after "failed validation:" if present, otherwise leave as-is
                reason=$(echo "$clean_line" | sed -E 's/.*failed validation:[[:space:]]*(.*)/\1/')
              elif [[ "$clean_line" == *"error"* ]]; then
                result="⚠️ error"
                reason=$(echo "$clean_line" | sed -E 's/.*error:[[:space:]]*(.*)/\1/')
              elif [[ "$clean_line" == *"valid"* ]]; then
                result="✅ valid"
                reason=""
              fi
      
              echo "| $resource_kind | $resource_name | $result | $reason |" >> $GITHUB_STEP_SUMMARY
            fi
          done < kubeconform_output.txt
      
          # Append the summary line after the table
          echo "" >> $GITHUB_STEP_SUMMARY
          grep '^Summary:' kubeconform_output.txt >> $GITHUB_STEP_SUMMARY
